{"version":3,"sources":["Components/Navbar/index.js","Components/DishItem/index.js","Components/Home/index.js","App.js","index.js"],"names":["Navbar","props","cartItems","_jsxs","className","children","_jsx","IoCartOutline","reduce","acc","cur","quantity","DishItem","dishDetails","addItem","removeItem","dishId","dishImage","dishType","dishName","dishCurrency","dishPrice","dishDescription","dishCalories","dishAvailability","addOnCat","concat","type","onClick","cartItem","find","each","getCartQuantity","length","src","alt","Home","_useState","useState","_useState2","_slicedToArray","activeTabName","setActiveTabName","_useState3","_useState4","categoryList","setCategoryList","_useState5","_useState6","setCartItems","_useState7","_useState8","isLoading","setIsLoading","getDishCategories","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","response","data","fetchedData","wrap","_context","prev","next","method","fetch","sent","json","tableData","table_menu_list","map","eachMenu","menuCategory","menu_category","menuCategoryId","menu_category_id","menuCategoryImage","menu_category_image","nextUrl","nexturl","categoryDishes","category_dishes","item","dish_id","dish_name","dish_price","dish_image","dish_currency","dish_calories","dish_description","dish_Availability","dish_Type","addonCat","stop","apply","arguments","useEffect","dish","isItemAlreadyPresent","console","log","prevState","_objectSpread","newDish","_toConsumableArray","filter","Loader","color","height","width","tabName","eachCategory","renderDishes","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c8cf1e2.chunk.js","sourcesContent":["import {IoCartOutline} from 'react-icons/io5'\nimport './index.css'\n\nconst Navbar = props => {\n  const {cartItems} = props\n  const getCartCount = () =>\n    cartItems.reduce((acc, cur) => acc + cur.quantity, 0)\n\n  return (\n    <div className=\"nav-bar\">\n      <h1 className=\"nav-heading\">UNI Resto Cafe</h1>\n      <div className=\"orders-section\">\n        <p className=\"orders-text\">My Orders</p>\n        <div className=\"cart-container\">\n          <IoCartOutline className=\"cart-icon\" />\n          <div className=\"cart-count-badge\">\n            <p className=\"cart-count\">{getCartCount()}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Navbar\n","import './index.css'\n\nconst DishItem = props => {\n  const {dishDetails, cartItems, addItem, removeItem} = props\n  const {\n    dishId,\n    dishImage,\n    dishType,\n    dishName,\n    dishCurrency,\n    dishPrice,\n    dishDescription,\n    dishCalories,\n    dishAvailability,\n    addOnCat,\n  } = dishDetails\n\n  const emptyString = ''\n\n  const onClickAdd = () => {\n    addItem(dishDetails)\n  }\n  const onClickSub = () => {\n    removeItem(dishDetails)\n  }\n  const getCartQuantity = () => {\n    const cartItem = cartItems.find(each => each.dishId === dishId)\n    return cartItem ? cartItem.quantity : 0\n  }\n\n  return (\n    <li className=\"dish-item\">\n      <div\n        className={`type-border ${\n          dishType === 1 ? 'non-veg-border' : 'veg-border'\n        }`}\n      >\n        <div className={`type-img ${dishType === 1 ? 'non-veg' : 'veg'}`}>\n          {emptyString}\n        </div>\n      </div>\n      <div className=\"dish-details\">\n        <h1 className=\"dish-name\">{dishName}</h1>\n        <p className=\"currency\">\n          {dishCurrency} {dishPrice}\n        </p>\n        <p className=\"dish-desc\">{dishDescription}</p>\n        {dishAvailability ? (\n          <div className=\"plus-minus-section\">\n            <button type=\"button\" className=\"control-btn\" onClick={onClickSub}>\n              -\n            </button>\n            <p className=\"item-quantity\">{getCartQuantity()}</p>\n            <button type=\"button\" className=\"control-btn\" onClick={onClickAdd}>\n              +\n            </button>\n          </div>\n        ) : (\n          <p className=\"not-available-text\">Not Available</p>\n        )}\n\n        {addOnCat.length !== 0 && (\n          <p className=\"customization-text\">Customizations available</p>\n        )}\n      </div>\n      <p className=\"calories\">{` ${dishCalories} Calories`}</p>\n      <img src={dishImage} className=\"dish-img\" alt={dishName} />\n    </li>\n  )\n}\nexport default DishItem\n","import {useState, useEffect} from 'react'\nimport Loader from 'react-loader-spinner'\nimport Navbar from '../Navbar'\nimport DishItem from '../DishItem'\nimport './index.css'\n\nconst Home = () => {\n  const [activeTabName, setActiveTabName] = useState('')\n  const [categoryList, setCategoryList] = useState([])\n  const [cartItems, setCartItems] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  const getUpdatedData = tableData =>\n    tableData.map(eachMenu => ({\n      menuCategory: eachMenu.menu_category,\n      menuCategoryId: eachMenu.menu_category_id,\n      menuCategoryImage: eachMenu.menu_category_image,\n      nextUrl: eachMenu.nexturl,\n      categoryDishes: eachMenu.category_dishes.map(item => ({\n        dishId: item.dish_id,\n        dishName: item.dish_name,\n        dishPrice: item.dish_price,\n        dishImage: item.dish_image,\n        dishCurrency: item.dish_currency,\n        dishCalories: item.dish_calories,\n        dishDescription: item.dish_description,\n        dishAvailability: item.dish_Availability,\n        dishType: item.dish_Type,\n        addOnCat: item.addonCat,\n      })),\n    }))\n\n  const getDishCategories = async () => {\n    const apiUrl =\n      'https://run.mocky.io/v3/72562bef-1d10-4cf5-bd26-8b0c53460a8e'\n    const options = {method: 'GET'}\n    const response = await fetch(apiUrl, options)\n    const data = await response.json()\n    const fetchedData = getUpdatedData(data[0].table_menu_list)\n    setCategoryList(fetchedData)\n    setActiveTabName(fetchedData[0].menuCategoryId)\n    setIsLoading(false)\n    // console.log(fetchedData)\n  }\n\n  useEffect(() => {\n    getDishCategories()\n    // eslint-disable-next-line\n  }, [])\n\n  const updateTab = tabName => {\n    setActiveTabName(tabName)\n  }\n  const addItem = dish => {\n    const isItemAlreadyPresent = cartItems.find(\n      each => each.dishId === dish.dishId,\n    )\n    console.log(isItemAlreadyPresent)\n    if (!isItemAlreadyPresent) {\n      const newDish = {...dish, quantity: 1}\n      setCartItems(prevState => [...prevState, newDish])\n    } else {\n      setCartItems(prevState =>\n        prevState.map(each =>\n          each.dishId === dish.dishId\n            ? {...each, quantity: each.quantity + 1}\n            : each,\n        ),\n      )\n    }\n  }\n\n  const removeItem = dish => {\n    const isItemAlreadyPresent = cartItems.find(\n      each => each.dishId === dish.dishId,\n    )\n    if (isItemAlreadyPresent) {\n      setCartItems(prevState =>\n        prevState\n          .map(each =>\n            each.dishId === dish.dishId\n              ? {...each, quantity: each.quantity - 1}\n              : each,\n          )\n          .filter(each => each.quantity > 0),\n      )\n    }\n  }\n\n  const renderCategory = () =>\n    categoryList.map(each => {\n      const onClickEvent = () => updateTab(each.menuCategoryId)\n      return (\n        <li className=\"dish-category-list-item\">\n          <button\n            type=\"button\"\n            className={`category-button ${\n              each.menuCategoryId === activeTabName && 'active-category'\n            }`}\n            onClick={onClickEvent}\n          >\n            {each.menuCategory}\n          </button>\n        </li>\n      )\n    })\n\n  const renderDishes = () => {\n    const {categoryDishes} = categoryList.find(\n      eachCategory => eachCategory.menuCategoryId === activeTabName,\n    )\n    return (\n      <ul className=\"dish-list\">\n        {categoryDishes.map(each => (\n          <DishItem\n            key={each.dishId}\n            dishDetails={each}\n            cartItems={cartItems}\n            addItem={addItem}\n            removeItem={removeItem}\n          />\n        ))}\n      </ul>\n    )\n  }\n\n  const renderLoader = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={50} width={50} />\n    </div>\n  )\n\n  return isLoading ? (\n    renderLoader()\n  ) : (\n    <div className=\"resto-contents\">\n      <Navbar cartItems={cartItems} />\n      <hr />\n      <ul className=\"dish-category-list\">{renderCategory()}</ul>\n      <hr />\n      {renderDishes()}\n    </div>\n  )\n}\nexport default Home\n","import Home from './Components/Home'\nimport './App.css'\n\n// write your code here\nconst App = () => <Home />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}